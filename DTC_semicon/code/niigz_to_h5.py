# -*- coding: utf-8 -*-
"""nii.gz_to_h5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NbfGrrFwE5W9hith-NW7nPwwdcQ3Exvj
"""

import os
import string
import gzip
import nibabel as nib
import numpy as np
import copy
import h5py
import os
from glob import glob

from glob import glob
# listt = glob('Raw/*')
# print(listt)
d = glob('logic/*')


##add to train list

with open('train.list','a') as f:
  for i in d:
    filename = i.split('/')[1]
    checklist = ['zdb_logic_d1_b2_s7_5_void', 'zdb_logic_d1_b2_s7_90_void', 'zdb_logic_d1_b2_s7_126_void', 'zdb_logic_d1_b3_s1_0','zdb_logic_d1_b3_s1_1']
    if filename not in checklist:
      print(filename)
      f.write(filename+'\n')

##add to test list
with open('test.list','w') as f:
  for i in d:
    filename = i.split('/')[1]
    checklist = ['zdb_logic_d1_b2_s7_5_void', 'zdb_logic_d1_b2_s7_90_void', 'zdb_logic_d1_b2_s7_126_void', 'zdb_logic_d1_b3_s1_0','zdb_logic_d1_b3_s1_1']
    if filename in checklist:
      print(filename)
      f.write(filename+'\n')
# #for check
# with open('train.list','r') as f:
#   image_list = f.readlines()
  
# image_list = [item.replace('\n','') for item in image_list]
# print(image_list)
# print(len(image_list))

nii_images = []
for dirpath, sf, files in os.walk('imagesTr'):
  for i in files:
    nii_images.append(os.path.join(dirpath, i))
        
print(nii_images)
print(len(nii_images))

#convert nii.gz to nii
for i in nii_images:
    decompressed_file = gzip.open(i)
    out_path = i.replace('/','_')[:-3]
    print(out_path)
    with open('images_nii/' + out_path, 'wb') as outfile:
        outfile.write(decompressed_file.read())

#create folder
import os
def mkdir(path):
  os.chdir("/content/gdrive/MyDrive/semicon_data/memory/h5_memory/")
  folder = os.path.exists(path)
  if not folder:                   
    os.makedirs(path)   

import os
import shutil

def list_dictionary_codes(root_dir):
    paths_list = []
    for parent, dirNames, fileNames in os.walk(root_dir):
        for name in fileNames:
            ext = ['.nii']
            if name.endswith(tuple(ext)):
                paths_list.append(os.path.join(parent, name))
    return paths_list


def copy_move_file_images(root_dir):
    
    paths_list = list_dictionary_codes(root_dir)
    print(paths_list)
    for file_path in paths_list:

        
        fpath = os.getcwd()
        print(file_path)
        foldername = file_path.split('/')[-1][9:-4]
        print(foldername)
     
        mkdir(foldername)
  
        shutil.copy(file_path,foldername)
        print("copying：",file_path)
    print("done!")

def copy_move_file_labels(root_dir):
  os.chdir("/content/gdrive/MyDrive/semicon_data/memory/memory_/")
  path_list = list_dictionary_codes(root_dir)
  for file_path in path_list:
    foldername = file_path.split('/')[-1][9:-4]
    print(foldername)
    shutil.copy(file_path,"/content/gdrive/MyDrive/semicon_data/memory/memory_/"+foldername)
    print("copying：",file_path)
  print("done!")

# copy_move_file_labels('/content/gdrive/MyDrive/semicon_data/memory/labels_nii/')

def save_large_dataset(file_name, images, labels):
    h5f = h5py.File(file_name + '.h5', 'w')
    h5f.create_dataset('images', data=images)
    h5f.create_dataset('labels', data=labels)
    h5f.close()

# for saving data with label into h5 format
indir = '/content/gdrive/MyDrive/semicon_data/memory/memory_/'

for root, dirs, filenames in os.walk(indir):
    print(filenames)
    for f in filenames:
      if 'imagesTr' == f[0:8]:
        print(f)
        midfolder = f[9:-4]
        img = nib.load(indir + midfolder +'/'+f)
        data = img.dataobj # Get the data object
        data = data[:,:,:] 
        # X = np.expand_dims(data, -1)
        X = data
        X = X / np.max(X)
        X = X.astype('float32')
        # X = np.expand_dims(X, 0)
        print('Shape: ', X.shape)
        print(np.unique(X))
        # Xs.append(X)
        # Xa = np.vstack(Xs)
      else:
        print(f)
        midfolder = f[9:-4]
        img = nib.load(indir + midfolder +'/'+f)
        data = img.dataobj # Get the data object
        data = data[:,:,:] 
        # Y = np.expand_dims(data, -1)
        Y = data
        # Y = Y / np.max(Y)
        Y = Y.astype('float32')
        # Y = np.expand_dims(Y, 0)
        print('Shape: ', Y.shape)
        print(np.unique(Y))

        foldername = midfolder
      
        mkdir(foldername)
        os.chdir('/content/gdrive/MyDrive/semicon_data/memory/h5_memory/'+foldername+'/')
        save_large_dataset("h5h5",X,Y)

# for saving data with unlabel into h5 format

indir = '/content/gdrive/MyDrive/semicon_data/dataset1/logic_unlabel/'

for root, dirs, filenames in os.walk(indir):
  
    print(filenames)
    output_size = (96,96,96)
    for f in filenames:
      if 'unlabel' == f[0:7]:
        print(f)
        midfolder = f[32:-4]
        print(midfolder)
        img = nib.load(indir + midfolder +'/'+f)
        data = img.dataobj # Get the data object
        data = data[:,:,:]
        # X = np.expand_dims(data, -1)
        X = data
        X = X / np.max(X)
        X = X.astype('float32')
        # X = np.expand_dims(X, 0)
        print('Shape: ', X.shape)
  
        data2 = np.zeros((96,96,96))# Get the data object
        Y = data2
        Y = Y.astype('float32')
        print('Shape: ', Y.shape)
        print(np.unique(Y))

        foldername = midfolder
        mkdir(foldername)
        os.chdir('/content/gdrive/MyDrive/semicon_data/dataset1/h5_logic_unlabel/'+foldername+'/')
        save_large_dataset("h5h5",X,Y)

# #for check h5 files
# import h5py
# os.chdir('/content/gdrive/MyDrive/semicon_data/dataset1/h5_logic/')
# h5f = h5py.File("s6_logic_seg7_void/h5h5.h5", 'r')
# image = h5f['images'][:]
# label = h5f['labels'][:]
# print(image.shape)
# print(label.shape)
# print(np.unique(image))
# print(np.unique(label))











